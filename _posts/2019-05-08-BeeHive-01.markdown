---
layout: post
title:  BeeHive
subtitle:   "App模块化编程的框架实现方案，吸收了Spring框架Service的理念来实现模块间的API耦合。"
author: AdminTest
date:   2019-05-08
header-mask: 0.6
catalog:    true
header-img: "img/beehive_header.png"
tags:
    - iOS
    - BeeHive
---

>本篇主要是带你从头开始接触阿里巴巴的开源框架 BeeHive 。<br>
>从运行开始，一步一步解析它到底做了什么。<br>
>学习并了解它的设计思想，以及如何实现模块化，给模块解耦。<br>
>本教程是基于 Github 上的项目 BeeHive-Master/Example 这个demo工程来解析的,
><br>你可以在下面这个地址获取项目源码。<br>
>GitHub地址：[alibaba/BeeHive](https://github.com/alibaba/BeeHive)
>本教程持续更新。<br>
>让我们开始吧

#### Example工程run起来

上面GitHub地址下载BeeHive源码，然后运行 `Example` 工程，运行之前需要 `pod install`。

常规套路，在 `AppDelegate didFinishLaunchingWithOptions` 打上断点，从头看看 `BeeHive` 写了哪些操作，到底要干嘛，如下图所示：

![launch](/img/BeeHive/launch.png)

工程还没launch，在控制台就出现几行打印输出了，先从第一条日志 `config = ShopModule` 着手，找到最靠前的日志是在哪打印的，全局搜索 `"config ="` 发现是在 `BHAnnotation.m` 文件 `BHReadConfiguration()` 方法里输出的 `BHLog(@"config = %@", str);` 

![log](/img/BeeHive/log.png)

在`BHReadConfiguration` 方法上打个断点，重新run工程，看看发生了什么

![dylib](/img/BeeHive/dylib.png)

控制台没任何日志信息，再看看断点堆栈信息，发现并不是从 `main()` 函数过来的，而是从 `_dyld_start` 开始的。这里涉及到一个问题，在 `main()` 函数之前，系统还会做一些其他事情，主要如下：

* 加载可执行文件（App的 `Mach.o` 文件的集合）；
* 加载动态链接库，进行 rebase 指针调整和 bind 符号绑定；
* Objc 运行时的初始处理，包括 Objc 相关类的注册、category 注册、selector 唯一性检查等；
* 初始化，包括了执行 `+load()` 方法、`attribute((constructor))` 修饰的函数的调用、创建 C++ 静态全局变量。

#### \__attribute((constructor))__

这里在`BHAnnotation.m` 发现有 `attribute((constructor))` 修饰的函数 `initProphet()` ，如下：

```objc
__attribute__((constructor))
void initProphet() {
    _dyld_register_func_for_add_image(dyld_callback);
}
```

也就是说，`BeeHive` 在 `main()` 函数之前通过 `attribute((constructor))` 做了一些准备操作。关于`attribute((constructor))` 函数，具体可见[GNU的文档](https://gcc.gnu.org/onlinedocs/gcc-6.2.0/gcc/Common-Function-Attributes.html)。

另外在文档中,还有提及,还有这么一个写法(`__attribute__((destructor))`。文档中关于这两个用法的说明如下:

>
The **constructor** attribute causes the function to be called automatically before execution enters `main()`. Similarly, the **destructor** attribute causes the function to be called automatically after `main()` completes or `exit()` is called. Functions with these attributes are useful for initializing data that is used implicitly during the execution of the program.

大概意思就是说 `constructor` 参数让系统执行 `main()` 函数之前调用函数(被 `__attribute__((constructor))` 修饰的函数).同理, `destructor` 让系统在 `main()` 函数退出或者调用了 `exit()` 之后,调用我们的函数.带有这些修饰属性的函数,对于我们初始化一些在程序中使用的数据非常有用.


我们回到 `attribute((constructor))` 修饰的函数看看具体做了些什么。

#### \_dyld_register_func_for_add_image()

`void initProphet()` 里面调用了 `_dyld_register_func_for_add_image()` （`_dyld_register_func_for_remove_image()`），这个函数官方文档解释如下：
>The following functions allow you to install callbacks which will be called by dyld whenever an image is loaded or unloaded.
During a call to `_dyld_register_func_for_add_image()` the callback func is called for every existing image. Later, it is called as each new image is loaded and bound (but initializers not yet run).
The callback registered with `_dyld_register_func_for_remove_image()` is called after any terminators in an image are run and before the image is un-memory-mapped.
>
>>**这里有个比较重要的概念，就是镜像 `image`，在 `Mach-O`文件系统中，所有的可执行文件、dylib 以及 Bundle 都是镜像。**

翻译过来就是 `_dyld_register_func_for_add_image()` 函数允许你设置一个回调函数，每当 `dylib` 加载一个镜像文件时都回调此函数，接着往下看 `dyld_callback` 这个回调函数都做了些什么。

```objc
static void dyld_callback(const struct mach_header *mhp, intptr_t vmaddr_slide)
{
    NSArray *mods = BHReadConfiguration(BeehiveModSectName, mhp);
    for (NSString *modName in mods) {
        Class cls;
        if (modName) {
            cls = NSClassFromString(modName);
            
            if (cls) {
                [[BHModuleManager sharedManager] registerDynamicModule:cls];
            }
        }
    }
    
    //register services
    NSArray<NSString *> *services = BHReadConfiguration(BeehiveServiceSectName,mhp);
    for (NSString *map in services) {
        NSData *jsonData =  [map dataUsingEncoding:NSUTF8StringEncoding];
        NSError *error = nil;
        id json = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&error];
        if (!error) {
            if ([json isKindOfClass:[NSDictionary class]] && [json allKeys].count) {
                
                NSString *protocol = [json allKeys][0];
                NSString *clsName  = [json allValues][0];
                
                if (protocol && clsName) {
                    [[BHServiceManager sharedManager] registerService:NSProtocolFromString(protocol) implClass:NSClassFromString(clsName)];
                }
                
            }
        }
    }
    
}
```

先忽略参数，看内部实现第一行，调用了 `BHReadConfiguration(BeehiveModSectName, mhp)` 并返回一个数组 `NSArray *mods`。其中参数 `BeehiveModSectName` 是一个宏定义，定义一个字符串 `"BeehiveMods"`，代表是BeeHive里的`模块`。最后返回结果为模块数组，内容为
```objc
Printing description of configs:
<__NSArrayM 0x600001a4b840>(
ShopModule
)
```

这里分析一下为什么会返回一个带有字符串	"ShopModule" 的数组：

`BHReadConfiguration`()函数如下：

```objc
NSArray<NSString *>* BHReadConfiguration(char *sectionName,const struct mach_header *mhp)
{
    NSMutableArray *configs = [NSMutableArray array];
    unsigned long size = 0;
#ifndef __LP64__
    uintptr_t *memory = (uintptr_t*)getsectiondata(mhp, SEG_DATA, sectionName, &size);
#else
    const struct mach_header_64 *mhp64 = (const struct mach_header_64 *)mhp;
    uintptr_t *memory = (uintptr_t*)getsectiondata(mhp64, SEG_DATA, sectionName, &size);
#endif
    
    unsigned long counter = size/sizeof(void*);
    for(int idx = 0; idx < counter; ++idx){
        char *string = (char*)memory[idx];
        NSString *str = [NSString stringWithUTF8String:string];
        if(!str)continue;
        
        BHLog(@"config = %@", str);
        if(str) [configs addObject:str];
    }
    
    return configs;
}
```

其中参数 `sectionName` 值为 **"BeehiveMods"** ，
 `mhp` 为一个指向 `Mach-O` 的头部 `mach_header *mhp` 的指针。
 简单理解的结论：也就是说这个函数是通过 `sectionName = "BeehiveMods"` 在`Mach-O`的头文件 `mach_header` 中找到的字符串 `"ShopModule"`，包装成数组。

#### @BeeHiveMod(ShopModule)

具体怎么实现的，先来看一下`ShopModule.m` 文件里的宏调用 `@BeeHiveMod(ShopModule)`：BeeHive的 Annotation 方式进行模块注册。类似Java注解的形式;

通过 `BeeHiveMod` 宏进行 `Annotation` 标记。

```objc
@BeeHiveMod(ShopModule)
```

`BeeHiveMod` 宏定义如下：

```objc
#define BeeHiveMod(name) \
class BeeHive; char * k##name##_mod BeeHiveDATA(BeehiveMods) = ""#name"";
```

`BeeHiveDATA` 又是一个宏：

```objc
#define BeeHiveDATA(sectname) __attribute((used, section("__DATA,"#sectname" ")))
```

最终 `BeeHiveMod` 宏会在预编译结束会完全展开成下面的样子：

```objc
char * kShopModule_mod __attribute((used, section("__DATA,""BeehiveMods"" "))) = """ShopModule""";
```

注意双引号的总对数。

##### \__attribute__((used))

到这里 `__attribute((used, section("segmentname, sectionname")))` 就需要先说明2个地方。

`__attribute` 第一个参数 `used` 很有用，这个关键字是用来修饰函数的。被 `used` 修饰以后，意味着即使函数没有被引用，在Release下也不会被优化。如果不加这个修饰，那么Release环境链接器下会去掉没有被引用的段。具体的描述可以看这个[gun的官方文档](https://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/Function-Attributes.html#Function%20Attributes)。

##### \__attribute__((section("name")))

`Static` 静态变量会按照他们申明的顺序，放到一个单独的段中。我们通过使用 `__attribute__((section("name")))` 来指明哪个段。数据则用 `__attribute__((used))` 来标记，防止链接器会优化删除未被使用的段。

再来具体说说 `section` 的作用。

编译器编译源代码后生成的文件叫目标文件，从文件结构上来说，它已经是编译后可执行的文件格式，只是还没有经过链接的过程。可执行文件 **(Executable)** 主要是 **Windows** 下的 **PE** (Portable Executable) 和 **Linux** 的 **ELF** (Executable Linkable Format)，它们也都是 **COFF** (Common file format) 格式的变种。程序源程序代码被编译之后会主要分成两个段：`程序指令` 和 `程序数据`。代码段属于程序指令，数据段和 `.bss` 段属于数据段。

![section](/img/BeeHive/section.png)

具体的例子见上图，可见 `.data` 数据段里面保存的都是初始化过的全局静态变量和局部静态变量。`.rodata` 段存放的是只读数据，一般都是 `const` 修饰的变量和字符串常量。 `.bss` 段存放的是未初始化的全局变量和局部静态变量。代码段就在 `.text` 段。

有时候我们需要指定一个特殊的段，来存放我们想要的数据。这里我们就把数据存在 `.data` 数据段。( `"__DATA"` )

当然还有其他的 `__attributes` 的修饰关键字，详情见[官方文档](https://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/Variable-Attributes.html)

回到代码上来：

```objc
char * kShopModule_mod __attribute((used, section("__DATA,""BeehiveMods"" "))) = """ShopModule""";
```

也就相当于：

```objc
char * kShopModule_mod = """ShopModule""";
```

只不过是把 `kShopModule_mod`所引用的字符串放到了特殊的段里面。

BeeHive的Module被这样存到了特殊的段中，然后通过 `BHReadConfiguration()` 取出来。

取出注册的Module数组，然后遍历出来，挨个Module初始化，后然通过BHModuleManager管理起来。

以上摘自[BeeHive —— 一个优雅但还在完善中的解耦框架](https://halfrost.com/beehive/)。

#### @BeeHiveService(protocol，vc)

`BeehiveService` 同理，也是通过宏定义 `@BeeHiveService(UserTrackServiceProtocol,BHUserTrackViewController)` 把 `protocol` 和 `viewController` 绑定起来，并通过 `BHServiceManager`管理起来。


#### 参考资料

[BeeHive —— 一个优雅但还在完善中的解耦框架](https://halfrost.com/beehive/)<br>
[动态修改 C 语言函数的实现](https://www.jianshu.com/p/625a61dfe)<br>
[深入剖析iOS动态链接库](https://www.jianshu.com/p/1de663f64c05)<br>
[__attribute__((constructor))用法解析](https://www.jianshu.com/p/dd425b9dc9db)<br>
[趣探 Mach-O：文件格式分析](https://www.jianshu.com/p/54d842db3f69)<br>
[BeeHive框架全面解析——iOS开发主流方案比较](https://xiaozhuanlan.com/topic/4052613897)
